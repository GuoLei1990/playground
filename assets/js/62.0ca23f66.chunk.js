(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{472:function(e,n,r){"use strict";r.r(n),n.default='/**\n * \u672c\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u51e0\u4f55\u4f53\u6e32\u67d3\u5668\u529f\u80fd\u3001\u5982\u4f55\u521b\u5efa\u51e0\u4f55\u4f53\u8d44\u6e90\u5bf9\u8c61\u3001\u5982\u4f55\u521b\u5efa\u6750\u8d28\u5bf9\u8c61\n */\nimport { FreeControl } from "@oasis-engine/controls";\nimport {\n  Buffer,\n  BufferBindFlag,\n  BufferGeometry,\n  BufferUsage,\n  Camera,\n  ConstantMaterial,\n  Engine,\n  GeometryRenderer,\n  IndexFormat,\n  PlaneGeometry,\n  PrimitiveTopology,\n  Vector4,\n  VertexElement,\n  VertexElementFormat,\n  WebGLEngine\n} from "oasis-engine";\n\n// \u521b\u5efa\u5f15\u64ce\u3001\u83b7\u53d6\u573a\u666f\u6839\u8282\u70b9\n// canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\n// canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\n\nlet engine = new WebGLEngine("o3-demo");\nengine.canvas.resizeByClientSize();\nconst scene = engine.sceneManager.activeScene;\nconst rootNode = scene.createRootEntity("root");\n\n// \u5728\u573a\u666f\u4e2d\u521b\u5efa\u76f8\u673a\u8282\u70b9\u3001\u914d\u7f6e\u4f4d\u7f6e\u548c\u76ee\u6807\u65b9\u5411\nconst cameraNode = rootNode.createChild("camera_node");\ncameraNode.transform.setPosition(0, 0, 20);\n\nconst camera = cameraNode.addComponent(Camera);\ncamera.farClipPlane = 2000;\n\nconst controler = cameraNode.addComponent(FreeControl);\ncontroler.movementSpeed = 100;\ncontroler.rotateSpeed = 1;\ncontroler.jumpY = 50;\n\nconst geometry = createCubeGeometry(engine, 50);\nconst material = new ConstantMaterial(engine, "box");\nmaterial.emission = new Vector4(0.5, 0, 0, 1);\n\nlet groundGeometry = new PlaneGeometry(engine, 2000, 2000, 100, 100);\ngroundGeometry.subGeometry.topology = PrimitiveTopology.LineStrip;\nlet groundMaterial = new ConstantMaterial(engine, "groundMat");\ngroundMaterial.emission = new Vector4(1, 1, 1, 1);\n\n// meshes in scene\nfor (let i = 0; i < 100; i++) {\n  let cube = rootNode.createChild("cube");\n  cube.transform.setPosition(Math.random() * 2000 - 1000, Math.random() * 200, Math.random() * 2000 - 1000);\n  const cubeRenderer = cube.addComponent(GeometryRenderer);\n  cubeRenderer.geometry = geometry;\n  cubeRenderer.material = material;\n}\n\n// ground\nlet ground = rootNode.createChild("ground");\nground.transform.setPosition(0, -25, 0);\nground.transform.rotateXYZ(-90, 0, 0);\nlet groundRender = ground.addComponent(GeometryRenderer);\ngroundRender.geometry = groundGeometry;\ngroundRender.material = groundMaterial;\n\n// \u542f\u52a8\u5f15\u64ce\nengine.run();\n\n/** ------ geometry.ts ---------*/\n\n/**\n * \u521b\u5efa\u7acb\u65b9\u4f53\u51e0\u4f55\u4f53\u3002\n * @param engine - \u5f15\u64ce\n * @param size - \u5c3a\u5bf8\n */\nfunction createCubeGeometry(engine: Engine, size: number): BufferGeometry {\n  const geometry = new BufferGeometry(engine, "cubeGeometry");\n\n  // prettier-ignore\n  const vertices =new Float32Array( [\n    -size / 2, -size / 2, -size / 2,  0, 0, 0,\n    size / 2, -size / 2, -size / 2,  1, 0, 0,\n    -size / 2, size / 2, -size / 2,  0, 1, 0,\n    size / 2, size / 2, -size / 2,  1, 1, 0,\n    -size / 2, -size / 2, size / 2,  0, 0, 1,\n    size / 2, -size / 2, size / 2,  1, 0, 1,\n    -size / 2, size / 2, size / 2,  0, 1, 1,\n    size / 2, size / 2, size / 2,  1, 1, 1\n  ]);\n  // prettier-ignore\n  const indices =new Uint8Array( [\n    0, 2, 1, 3, 1, 2,\n    0, 4, 2, 6, 2, 4,\n    5, 1, 7, 3, 7, 1,\n    6, 7, 2, 3, 2, 7,\n    0, 1, 4, 5, 4, 1,\n    4, 5, 6, 7, 6, 5\n  ]);\n\n  const vertexBuffer = new Buffer(engine, BufferBindFlag.VertexBuffer, vertices, BufferUsage.Static);\n  const indexBuffer = new Buffer(engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Static);\n\n  // bind buffer\n  geometry.setVertexBufferBinding(vertexBuffer, 24);\n  geometry.setIndexBufferBinding(indexBuffer, IndexFormat.UInt8);\n\n  // add vertexElement\n  geometry.setVertexElements([\n    new VertexElement("POSITION", 0, VertexElementFormat.Vector3, 0),\n    new VertexElement("COLOR", 12, VertexElementFormat.Vector3, 0)\n  ]);\n\n  //set drawCount\n  geometry.addSubGeometry(0, indices.length);\n  return geometry;\n}\n'}}]);
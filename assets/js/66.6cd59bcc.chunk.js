(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{476:function(e,n,t){"use strict";t.r(n),n.default='import {\n  BlinnPhongMaterial,\n  Camera,\n  ConstantMaterial,\n  CuboidGeometry,\n  GeometryRenderer,\n  Script,\n  SphereGeometry,\n  SpotLight,\n  SystemInfo,\n  Vector3,\n  Vector4,\n  WebGLEngine\n} from "oasis-engine";\n\nconst target = new Vector3(0, -3, 0);\nconst up = new Vector3(0, 1, 0);\n\nclass Move extends Script {\n  time = 0;\n  y = 2;\n  range = 5;\n\n  constructor(node) {\n    super(node);\n  }\n\n  onUpdate(deltaTime) {\n    this.time += deltaTime / 1000;\n    let x = Math.cos(this.time) * this.range;\n    let y = Math.sin(this.time) * this.range * 0.2 + this.y;\n    let z = Math.cos(this.time) * this.range;\n    this.entity.position = new Vector3(x, y, z);\n  }\n}\n\n// \u63a7\u5236 light entity \u59cb\u7ec8\u770b\u5411\u56fa\u5b9a\u70b9\nclass LookAtFocus extends Script {\n  onUpdate(deltaTime) {\n    light1.transform.lookAt(target, up);\n  }\n}\n\n//-- create engine object\nconst engine = new WebGLEngine("o3-demo");\nengine.canvas.width = window.innerWidth * SystemInfo.devicePixelRatio;\nengine.canvas.height = window.innerHeight * SystemInfo.devicePixelRatio;\nconst scene = engine.sceneManager.activeScene;\nconst rootEntity = scene.createRootEntity();\n\n// Logger.enable();\nfunction createCuboidGeometry(name, position, rotation, w, h, d) {\n  let obj = rootEntity.createChild(name);\n  obj.position = new Vector3(...position);\n  obj.transform.rotation = new Vector3(rotation[0], rotation[0], rotation[0]);\n  let cubeRenderer = obj.addComponent(GeometryRenderer);\n  cubeRenderer.geometry = new CuboidGeometry(rootEntity.engine, w, h, d);\n  cubeRenderer.material = mtl;\n  cubeRenderer["recieveShadow"] = true;\n}\n\nlet mtl = new BlinnPhongMaterial(engine, "TestMaterial");\nmtl.diffuse = new Vector4(0.1, 0.9, 0.8, 1);\n\n//-- create light entity\nlet lighthouse = rootEntity.createChild("lighthouse");\nlet light1 = lighthouse.createChild("light1");\nlight1.addComponent(Move);\nlight1.addComponent(LookAtFocus);\n\nlet spotLight = light1.addComponent(SpotLight);\nspotLight.color = new Vector3(1, 1, 1);\nspotLight.intensity = 1.0;\nspotLight.distance = 80;\nspotLight.decay = 0;\nspotLight.angle = Math.PI / 12;\nspotLight.penumbra = 0.2;\nspotLight["enableShadow"] = true;\nspotLight["shadow"].bias = 0.0001;\nspotLight["shadow"].intensity = 0.2;\n\nlet lgtMtl = new ConstantMaterial(engine, "test_mtl1");\nlgtMtl.emission = new Vector4(0.85, 0.85, 0.85, 1);\n\nlet sphereRenderer3 = light1.addComponent(GeometryRenderer);\nsphereRenderer3.geometry = new SphereGeometry(engine, 0.1);\nsphereRenderer3.material = lgtMtl;\n\n//-- create geometry\ncreateCuboidGeometry("cubiod1", [0, -3, 0], [0, 0, 0], 10, 0.1, 10);\ncreateCuboidGeometry("cubiod2", [5, -2, 0], [0, 0, 0], 0.1, 2, 10);\ncreateCuboidGeometry("cubiod3", [-5, -2, 0], [0, 0, 0], 0.1, 2, 10);\ncreateCuboidGeometry("cubiod4", [0, -2, -5], [0, 0, 0], 10, 2, 0.1);\n\n//-- create camera\nlet cameraNode = rootEntity.createChild("camera_node");\ncameraNode.transform.position = new Vector3(0, 5, 17);\ncameraNode.transform.lookAt(new Vector3(), new Vector3(0, 1, 0));\ncameraNode.addComponent(Camera);\n\n//-- run\nengine.run();\n'}}]);